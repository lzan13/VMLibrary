apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

// 获取配置信息
def configs = rootProject.ext.configs
def signings = rootProject.ext.signings

android {
    compileSdkVersion configs.compileSdkVersion

    defaultConfig {
        applicationId configs.applicationId
        minSdkVersion configs.minSdkVersion
        targetSdkVersion configs.targetSdkVersion
        versionCode configs.versionCode
        versionName configs.versionName

        // 简单粗暴解决多个库出现 UnsatisfiedLinkError 文件错误问题
        ndk {
            // "x86", "armeabi-v7a", "arm64-v8a"
            abiFilters "armeabi-v7a"
        }
    }

    // 签名信息
    signingConfigs {
        // 签名信息，因为签名文件是保密信息，放在一个配置文件中进行读取，这个文件不会再版本库里存在
        release {
            keyAlias = signings.keyAlias
            keyPassword = signings.keyPassword
            storeFile = file(signings.storeFile)
            storePassword = signings.storePassword
        }
    }

    // 编译配置
    buildTypes {
        debug {
            // 是否开启压缩
            zipAlignEnabled false
            // 是否开启混淆
            minifyEnabled false
            // Debug 打包签名信息，这里和 release 配置相同方便三方登录与分享调试
            signingConfig signingConfigs.release
        }
        release {
            // 是否开启压缩
            zipAlignEnabled true
            // 是否开启混淆
            minifyEnabled true
            // 打包时删除无用资源 依赖于混淆，必须和 minifyEnabled 一起使用
            shrinkResources true
            // 设置正式打包的签名
            signingConfig signingConfigs.release
            // 混淆文件
            // proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            proguardFiles 'proguard-rules.pro'

            // 修改生成的 apk 名字，格式为:项目-版本-时间-渠道名.apk
            android.applicationVariants.all { variant ->
                variant.outputs.all {
                    outputFileName = "${rootProject.name}V${defaultConfig.versionName}.${getTime()}." + variant.productFlavors[0].name + '.apk'
                }
            }
        }
    }

    // 多渠道打包配置
    flavorDimensions "default"
    productFlavors {
        Develop {
            dimension = "default"
            manifestPlaceholders = [
                    ADMOB_APP_ID: configs.admobAppId,
                    BUGLY_APP_ID: configs.buglyAppId,
                    UMENG_APP_ID: configs.umengAppId,
                    APP_CHANNEL : "Develop",
                    APP_VERSION : configs.versionName
            ]
        }
    }

    lintOptions {
        abortOnError false
    }

    // 设置使用 Java 1.8
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    // kotlin 配置
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }
    // 阿里巴巴 ARouter Kotlin 下的配置
    kapt{
        arguments {
            arg("AROUTER_MODULE_NAME", project.getName())
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"

    implementation 'androidx.core:core-ktx:1.3.2'
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.annotation:annotation:1.1.0'
    kapt 'androidx.annotation:annotation:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation 'com.google.android.material:material:1.2.1'

    // Gson 解析 JSON https://github.com/google/gson
    implementation 'com.google.code.gson:gson:2.8.6'

    // Glide 图片加载库 https://github.com/bumptech/glide
    implementation 'com.github.bumptech.glide:glide:4.11.0'
    kapt 'com.github.bumptech.glide:compiler:4.11.0'

    // 图片选择器 https://github.com/yangpeixing/YImagePicker
    implementation 'com.ypx.yimagepicker:androidx:3.1.4'

    // 动画库 https://github.com/LottieFiles/lottie-android
    implementation 'com.airbnb.android:lottie:3.4.4'

    // 强大 WebView 库 https://github.com/Justson/AgentWeb
    implementation 'com.just.agentweb:agentweb:4.1.3'

    // 视频播放库 https://github.com/CarGuo/GSYVideoPlayer
//    implementation 'com.shuyu:GSYVideoPlayer:8.0.0'
    implementation 'com.shuyu:gsyVideoPlayer-java:8.0.0'
    //是否需要ExoPlayer模式
    //api 'com.shuyu:GSYVideoPlayer-exo2:8.0.0'
    //根据你的需求ijk模式的so
    implementation 'com.shuyu:gsyVideoPlayer-armv7a:8.0.0'

    // 阿里巴巴 ARouter 库 https://github.com/alibaba/ARouter
    implementation 'com.alibaba:arouter-api:1.5.0'
    kapt 'com.alibaba:arouter-compiler:1.2.2'

    // 引入自己封装的库
    //    implementation project(':vmpicker')
    implementation project(':vmtools')
}

// 获取当前系统时间
def getTime() {
    return new Date().format("yyyyMMddHHmm", TimeZone.getTimeZone("UTC"))
}