plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'kotlin-parcelize'
}

// 引入路由公共配置
apply from: "${rootDir.absolutePath}/arouter.gradle"
// 引入通用公共配置
apply from: "${rootDir.absolutePath}/common.gradle"

// 获取配置信息
def configs = rootProject.ext.configs
def signings = rootProject.ext.signings

android {
    namespace configs.applicationId
    compileSdk configs.compileSdkVersion

    defaultConfig {
        applicationId configs.applicationId
        minSdkVersion configs.minSdkVersion
        targetSdkVersion configs.targetSdkVersion
        versionCode configs.versionCode
        versionName configs.versionName

        // 简单粗暴解决多个库出现 UnsatisfiedLinkError 文件错误问题
//        ndk {
//            // "x86", "armeabi-v7a", "arm64-v8a"
//            abiFilters "armeabi-v7a"
//        }
    }

    // 签名信息
    signingConfigs {
        // 签名信息，因为签名文件是保密信息，放在一个配置文件中进行读取，这个文件不会再版本库里存在
        release {
            keyAlias = signings.keyAlias
            keyPassword = signings.keyPassword
            storeFile = file(signings.storeFile)
            storePassword = signings.storePassword
        }
    }

    // 编译配置
    buildTypes {
        debug {
//            // 是否开启压缩
//            zipAlign false
            // 是否开启混淆
            minifyEnabled false
            // 打包时删除无用资源 依赖于混淆，必须和 minifyEnabled 一起使用
            shrinkResources false
            // Debug 打包签名信息，这里和 release 配置相同方便三方登录与分享调试
            signingConfig signingConfigs.release
        }
        release {
//            // 是否开启压缩
//            zipAlign true
            // 是否开启混淆
            minifyEnabled true
            // 打包时删除无用资源 依赖于混淆，必须和 minifyEnabled 一起使用
            shrinkResources true
            // 设置正式打包的签名
            signingConfig signingConfigs.release
            // 混淆文件
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

//            // 修改生成的 apk 名字，格式为:项目-版本-时间-渠道名.apk
//            android.applicationVariants.all { variant ->
//                variant.outputs.all {
//                    outputFileName = "${rootProject.name}V${defaultConfig.versionName}.${getTime()}." + variant.productFlavors[0].name + '.apk'
//                }
//            }
        }
    }

//    // 多渠道打包配置
//    flavorDimensions "default"
//    productFlavors {
//        Develop {
//            dimension = "default"
//            manifestPlaceholders = [
//                    appChannel   : "Develop",
//                    umengAppKey  : configs.umengAppKey,
//            ]
//        }
//    }

    kapt {
        arguments {
            // Room 配置
            arg("room.schemaLocation", "$projectDir/schemas".toString())
        }
    }

}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')

    kapt "androidx.room:room-compiler:2.3.0"

    // 依赖 base 库
    implementation project(':base:vmbase')
    // 依赖 common 库
    implementation project(':base:vmcommon')
    // 依赖 db 库
    implementation project(':core:vmdb')
    // 依赖 image 库
    implementation project(':core:vmimage')
    // 依赖 qr 库
//    implementation project(':core:vmqr')
    // 依赖 report 库
//    implementation project(':core:vmreport')
    // 依赖 request 库
//    implementation project(':core:vmrequest')
}

// 获取当前系统时间
def getTime() {
    return new Date().format("yyyyMMddHHmm", TimeZone.getTimeZone("UTC"))
}

